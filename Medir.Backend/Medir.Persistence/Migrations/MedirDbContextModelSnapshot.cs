// <auto-generated />
using System;
using Medir.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Medir.Persistence.Migrations
{
    [DbContext(typeof(MedirDbContext))]
    partial class MedirDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Medir.Domain.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<Guid>("MedicAppointmentAvailabilityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Prescription")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("MedicAppointmentAvailabilityId")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Medir.Domain.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Medir.Domain.Medic", b =>
                {
                    b.Property<Guid>("MedicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MedicId");

                    b.HasIndex("MedicId")
                        .IsUnique();

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("Medir.Domain.MedicAppointmentAvailability", b =>
                {
                    b.Property<Guid>("MedicAppointmentAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PolyclinicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MedicAppointmentAvailabilityId");

                    b.HasIndex("MedicId");

                    b.HasIndex("PolyclinicId");

                    b.HasIndex("PositionId");

                    b.ToTable("MedicAppointmentAvailabilities");
                });

            modelBuilder.Entity("Medir.Domain.MedicPolyclinic", b =>
                {
                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PolyclinicId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("MedicId", "PolyclinicId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("MedicPolyclinics");
                });

            modelBuilder.Entity("Medir.Domain.MedicPosition", b =>
                {
                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOnPosition")
                        .HasColumnType("Date");

                    b.HasKey("MedicId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("MedicPositions");
                });

            modelBuilder.Entity("Medir.Domain.Polyclinic", b =>
                {
                    b.Property<Guid>("PolyclinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PolyclinicAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PolyclinicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PolyclinicPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PolyclinicPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PolyclinicId");

                    b.HasIndex("CityId");

                    b.HasIndex("PolyclinicId")
                        .IsUnique();

                    b.ToTable("Polyclinics");
                });

            modelBuilder.Entity("Medir.Domain.Position", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PositionId");

                    b.HasIndex("PositionId")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Medir.Domain.Appointment", b =>
                {
                    b.HasOne("Medir.Domain.MedicAppointmentAvailability", "MedicAppointmentAvailability")
                        .WithOne("Appointment")
                        .HasForeignKey("Medir.Domain.Appointment", "MedicAppointmentAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicAppointmentAvailability");
                });

            modelBuilder.Entity("Medir.Domain.MedicAppointmentAvailability", b =>
                {
                    b.HasOne("Medir.Domain.Medic", "Medic")
                        .WithMany("MedicAppointmentAvailabilities")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medir.Domain.Polyclinic", "Polyclinic")
                        .WithMany("MedicAppointmentAvailabilities")
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medir.Domain.Position", "Position")
                        .WithMany("MedicAppointmentAvailabilities")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("Polyclinic");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Medir.Domain.MedicPolyclinic", b =>
                {
                    b.HasOne("Medir.Domain.Medic", "Medic")
                        .WithMany("MedicPolyclinics")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medir.Domain.Polyclinic", "Polyclinic")
                        .WithMany("MedicPolyclinics")
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("Polyclinic");
                });

            modelBuilder.Entity("Medir.Domain.MedicPosition", b =>
                {
                    b.HasOne("Medir.Domain.Medic", "Medic")
                        .WithMany("MedicPositions")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medir.Domain.Position", "Position")
                        .WithMany("MedicPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Medir.Domain.Polyclinic", b =>
                {
                    b.HasOne("Medir.Domain.City", "City")
                        .WithMany("Polyclinics")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Medir.Domain.City", b =>
                {
                    b.Navigation("Polyclinics");
                });

            modelBuilder.Entity("Medir.Domain.Medic", b =>
                {
                    b.Navigation("MedicAppointmentAvailabilities");

                    b.Navigation("MedicPolyclinics");

                    b.Navigation("MedicPositions");
                });

            modelBuilder.Entity("Medir.Domain.MedicAppointmentAvailability", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Medir.Domain.Polyclinic", b =>
                {
                    b.Navigation("MedicAppointmentAvailabilities");

                    b.Navigation("MedicPolyclinics");
                });

            modelBuilder.Entity("Medir.Domain.Position", b =>
                {
                    b.Navigation("MedicAppointmentAvailabilities");

                    b.Navigation("MedicPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
